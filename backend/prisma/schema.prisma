// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum Role {
  OWNER
  SITE_INCHARGE
  SITE_SUPERVISOR
  CLUSTER_SUPERVISOR
}

enum JobStatus {
  COMPLETED
  PENDING
  IN_PROGRESS
  CONSTRAINT
}

enum ResourceStatus {
  WORKING
  BREAKDOWN
  FREE
}

enum DevicePriority {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum DeviceStatus {
  COMPLETED
  CONSTRAINT
  IN_PROGRESS
  PENDING
}

// Main Models
model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  passwordHash String     @map("password_hash")
  name         String
  phone        String?
  role         Role
  status       UserStatus @default(PENDING)
  siteId       Int?       @map("site_id") // null for OWNER role
  superiorId   Int?       @map("superior_id") // immediate superior
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  site              Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  superior          User?     @relation("UserHierarchy", fields: [superiorId], references: [id])
  subordinates      User[]    @relation("UserHierarchy")
  createdSites      Site[]    @relation("SiteCreator")
  assignedDevices   Device[]  @relation("DeviceAssignee")
  createdDevices    Device[]  @relation("DeviceCreator")
  siteSupervisorDevices Device[] @relation("DeviceSiteSupervisor")
  updatedJobs       Job[]     @relation("JobUpdater")
  createdPreSDJobs  PreSDJob[] @relation("PreSDJobCreator")
  updatedPreSDJobs  PreSDJob[] @relation("PreSDJobUpdater")
  createdManpower   Manpower[] @relation("ManpowerCreator")
  updatedManpower   Manpower[] @relation("ManpowerUpdater")

  @@map("users")
  @@index([role]) // Index for role-based queries
  @@index([status]) // Index for status filtering
  @@index([siteId]) // Index for site-based queries
  @@index([superiorId]) // Index for hierarchy queries
  @@index([role, siteId]) // Composite index for role and site filtering
  @@index([status, superiorId]) // Composite index for pending user queries
}

model Site {
  id          Int      @id @default(autoincrement())
  name        String
  location    String?
  description String?
  createdById Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  createdBy User     @relation("SiteCreator", fields: [createdById], references: [id])
  users     User[]
  devices   Device[]
  resources Resource[]
  preSDJobs PreSDJob[]
  manpower  Manpower[]
  safety    Safety[]
  tbtTopics TBTTopic[]

  @@map("sites")
}

model Device {
  id           Int      @id @default(autoincrement())
  serialNumber String   @unique @map("serial_number")
  name         String
  type         String   // "Heat Exchanger", "Pump", etc.
  siteId       Int      @map("site_id")
  siteSupervisorId Int? @map("site_supervisor_id") // Site Supervisor ID (new)
  assignedTo   Int?     @map("assigned_to") // Cluster Supervisor ID
  createdBy    Int      @map("created_by")  // Site In-Charge ID
  priority     DevicePriority @default(MEDIUM)
  status       DeviceStatus @default(PENDING) // Device status based on job statuses
  targetDate   DateTime? @map("target_date") // Target completion date
  attributes   Json?    // Flexible key-value pairs for device specs
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  site         Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteSupervisor User? @relation("DeviceSiteSupervisor", fields: [siteSupervisorId], references: [id])
  assignedUser User?  @relation("DeviceAssignee", fields: [assignedTo], references: [id])
  creator      User   @relation("DeviceCreator", fields: [createdBy], references: [id])
  jobs         Job[]

  @@map("devices")
  @@index([siteId])
  @@index([siteSupervisorId])
  @@index([assignedTo])
  @@index([serialNumber])
  @@index([priority])
  @@index([status]) // Index for device status filtering
  @@index([targetDate])
  @@index([siteId, type]) // Composite index for efficient unique device types by site queries
  @@index([type]) // Index for device type queries across all sites
  @@index([createdBy]) // Index for createdBy queries
  @@index([siteId, priority]) // Composite index for priority filtering by site
  @@index([siteId, siteSupervisorId]) // Composite index for supervisor device queries
  @@index([siteId, status]) // Composite index for site status filtering
}

model Job {
  id         Int       @id @default(autoincrement())
  deviceId   Int       @map("device_id")
  deviceType String?   @map("device_type") // Type of device this job belongs to - auto-populated by trigger
  name       String
  status     JobStatus @default(PENDING)
  comment    String?   // Required when status is 'CONSTRAINT'
  updatedBy  Int?      @map("updated_by") // Last person who updated status
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  device  Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  updater User?  @relation("JobUpdater", fields: [updatedBy], references: [id])

  @@map("jobs")
  @@index([deviceId])
  @@index([deviceType]) // Index for device type filtering
  @@index([deviceType, status]) // Composite index for device type and status queries
  @@index([updatedBy])
  @@index([status]) // Index for status filtering
  @@index([deviceId, status]) // Composite index for device constraint queries
  @@index([status, updatedAt]) // Composite index for constraint report ordering
}

model Resource {
  id           Int            @id @default(autoincrement())
  name         String
  regNo        String         @unique
  type         String
  siteId       Int?
  allocatedAt  DateTime?
  status       ResourceStatus @default(FREE)
  dispatchDate DateTime?
  attributes   Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  site         Site?          @relation(fields: [siteId], references: [id])
}

model PreSDJob {
  id              Int       @id @default(autoincrement())
  jobDescription  String    @map("job_description")
  status          JobStatus @default(IN_PROGRESS)
  completedDate   DateTime? @map("completed_date")
  priority        DevicePriority @default(MEDIUM)
  remarks         String?
  siteId          Int       @map("site_id")
  createdBy       Int       @map("created_by")
  updatedBy       Int?      @map("updated_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  site      Site  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  creator   User  @relation("PreSDJobCreator", fields: [createdBy], references: [id])
  updater   User? @relation("PreSDJobUpdater", fields: [updatedBy], references: [id])

  @@map("presd_jobs")
  @@index([siteId])
  @@index([status])
  @@index([priority])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([siteId, status]) // Composite index for site status filtering
  @@index([siteId, priority]) // Composite index for site priority filtering
  @@index([status, completedDate]) // Composite index for completion tracking
}

model Manpower {
  id          Int      @id @default(autoincrement())
  siteId      Int      @map("site_id")
  designation String
  date        DateTime @db.Date
  dayshift    Int      @default(0)
  nightshift  Int      @default(0)
  createdBy   Int      @map("created_by")
  updatedBy   Int?     @map("updated_by")

  // Relations
  site    Site  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  creator User  @relation("ManpowerCreator", fields: [createdBy], references: [id])
  updater User? @relation("ManpowerUpdater", fields: [updatedBy], references: [id])

  @@map("manpower")
  @@index([siteId, date]) // Composite index for site-specific daily queries
  @@index([date]) // Index for date-based queries across sites
  @@index([designation]) // Index for designation-based filtering
  @@index([siteId, designation]) // Composite index for site + designation queries
  @@index([createdBy]) // Index for user-specific queries
  @@unique([siteId, designation, date]) // Prevent duplicate entries for same designation on same date
}

// Safety statistics per site per date
model Safety {
  id              Int      @id @default(autoincrement())
  siteId          Int      @map("site_id")
  date            DateTime @db.Date
  nearmiss        Int      @default(0)
  firstaid        Int      @default(0)
  lti             Int      @default(0)
  fireincidents   Int      @default(0)
  auditsConducted Int      @default(0) @map("audits_conducted")
  incidentReport  Int      @default(0) @map("incident_report")

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("safety")
  @@unique([siteId, date])
  @@index([siteId, date])
}

// Toolbox Talk (TBT) topics/observations per site per date
model TBTTopic {
  id                          Int      @id @default(autoincrement())
  siteId                      Int      @map("site_id")
  date                        DateTime @db.Date
  specificPPE                 String?  @map("specific_ppe")
  housekeeping                String?
  plantEquipmentSafety        String?  @map("plant_equipment_safety")
  workingUnderSuspendedLoad   String?  @map("working_under_suspended_load")
  importantOfEyeShower        String?  @map("important_of_eye_shower")

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("tbt_topics")
  @@unique([siteId, date])
  @@index([siteId, date])
}
