// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum Role {
  OWNER
  SITE_INCHARGE
  SITE_SUPERVISOR
  CLUSTER_SUPERVISOR
}

enum JobStatus {
  COMPLETED
  IN_PROGRESS
  CONSTRAINT
}

enum ResourceStatus {
  WORKING
  BREAKDOWN
  FREE
}

enum DevicePriority {
  LOW
  MEDIUM
  HIGH
  EXTREME
}

// Main Models
model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  passwordHash String     @map("password_hash")
  name         String
  phone        String?
  role         Role
  status       UserStatus @default(PENDING)
  siteId       Int?       @map("site_id") // null for OWNER role
  superiorId   Int?       @map("superior_id") // immediate superior
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  site              Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  superior          User?     @relation("UserHierarchy", fields: [superiorId], references: [id])
  subordinates      User[]    @relation("UserHierarchy")
  createdSites      Site[]    @relation("SiteCreator")
  assignedDevices   Device[]  @relation("DeviceAssignee")
  createdDevices    Device[]  @relation("DeviceCreator")
  siteSupervisorDevices Device[] @relation("DeviceSiteSupervisor")
  updatedJobs       Job[]     @relation("JobUpdater")

  @@map("users")
}

model Site {
  id          Int      @id @default(autoincrement())
  name        String
  location    String?
  description String?
  createdById Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  createdBy User     @relation("SiteCreator", fields: [createdById], references: [id])
  users     User[]
  devices   Device[]
  resources Resource[]

  @@map("sites")
}

model Device {
  id           Int      @id @default(autoincrement())
  serialNumber String   @unique @map("serial_number")
  name         String
  type         String   // "Heat Exchanger", "Pump", etc.
  subtype      String?  // "Floating", "Fixed", etc.
  siteId       Int      @map("site_id")
  siteSupervisorId Int? @map("site_supervisor_id") // Site Supervisor ID (new)
  assignedTo   Int?     @map("assigned_to") // Cluster Supervisor ID
  createdBy    Int      @map("created_by")  // Site In-Charge ID
  priority     DevicePriority @default(MEDIUM)
  targetDate   DateTime? @map("target_date") // Target completion date
  attributes   Json?    // Flexible key-value pairs for device specs
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  site         Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteSupervisor User? @relation("DeviceSiteSupervisor", fields: [siteSupervisorId], references: [id])
  assignedUser User?  @relation("DeviceAssignee", fields: [assignedTo], references: [id])
  creator      User   @relation("DeviceCreator", fields: [createdBy], references: [id])
  jobs         Job[]

  @@map("devices")
  @@index([siteId])
  @@index([siteSupervisorId])
  @@index([assignedTo])
  @@index([serialNumber])
  @@index([priority])
  @@index([targetDate])
}

model Job {
  id        Int       @id @default(autoincrement())
  deviceId  Int       @map("device_id")
  name      String
  status    JobStatus @default(IN_PROGRESS)
  comment   String?   // Required when status is 'CONSTRAINT'
  updatedBy Int?      @map("updated_by") // Last person who updated status
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  device  Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  updater User?  @relation("JobUpdater", fields: [updatedBy], references: [id])

  @@map("jobs")
}

model Resource {
  id           Int            @id @default(autoincrement())
  name         String
  regNo        String         @unique
  type         String
  siteId       Int?
  allocatedAt  DateTime?
  status       ResourceStatus @default(FREE)
  dispatchDate DateTime?
  attributes   Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  site         Site?          @relation(fields: [siteId], references: [id])
}
